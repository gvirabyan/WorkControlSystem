import 'dart:convert';
import 'dart:math';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:crypto/crypto.dart';
import 'package:shared_preferences/shared_preferences.dart';

class AuthService {
  final users = FirebaseFirestore.instance.collection('users');
  final promoCodes = FirebaseFirestore.instance.collection('promoCodes');

  /// –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
  String hashPassword(String password) {
    return sha256.convert(utf8.encode(password)).toString();
  }

  /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
  Future<String> generateUniquePromoCode() async {
    final random = Random();
    String code;
    bool exists = true;

    do {
      code = (100000 + random.nextInt(900000)).toString(); // 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
      final query = await promoCodes.where('promoCode', isEqualTo: code).get();
      exists = query.docs.isNotEmpty;
    } while (exists);

    return code;
  }

  /// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç `userId`, –∫–æ—Ç–æ—Ä—ã–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª Firestore
  Future<String> register(
      String emailOrPhone,
      String password,
      String type, {
        required String name,
        String? promoCodeForEmployee,
      }) async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç email/phone
    final query = await users.where('emailOrPhone', isEqualTo: emailOrPhone).get();
    if (query.docs.isNotEmpty) throw Exception("User already exists");

    final hashedPassword = hashPassword(password);

    Map<String, dynamic> userData = {
      'name': name,
      'emailOrPhone': emailOrPhone,
      'password': hashedPassword,
      'type': type,
      'created_at': FieldValue.serverTimestamp(),
    };

    if (type == 'company') {
      // –ö–æ–º–ø–∞–Ω–∏—è ‚Üí –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º promoCode
      String promoCode = await generateUniquePromoCode();
      userData['promoCode'] = promoCode;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º promoCode –æ—Ç–¥–µ–ª—å–Ω–æ
      await promoCodes.add({
        'company': name,
        'companyContact': emailOrPhone,
        'promoCode': promoCode,
        'created_at': FieldValue.serverTimestamp(),
      });
    } else if (type == 'employee') {
      if (promoCodeForEmployee != null) {
        userData['promoCode'] = promoCodeForEmployee;
      }

      // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
      userData.addAll({
        'startDate': '09:00',
        'endDate': '18:00',
        'status': 'Not started',
        'task': 'No task assigned',
        'workedHours': '0',
        'weeklyHours': '40',
      });
    }

    // –°–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π doc ID –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    final docRef = users.doc();
    await docRef.set(userData);

    // üîπ –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π –¥–æ–∫—É–º–µ–Ω—Ç –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ vacations –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    if (type == 'employee') {
      await FirebaseFirestore.instance.collection('vacations').add({
        'userId': docRef.id,
        'name': name,
        'emailOrPhone': emailOrPhone,
        'vacationStartDate': '', // –ø—É—Å—Ç–æ –ø–æ–∫–∞ –æ—Ç–ø—É—Å–∫ –Ω–µ –∑–∞–¥–∞–Ω
        'vacationEndDate': '',
        'vacationReason': '',
        'createdAt': FieldValue.serverTimestamp(),
      });
    }
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('userId', docRef.id);
    await prefs.setString('userType', type);
    return docRef.id;
  }


  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
  Future<bool> promoCodeExists(String code) async {
    final query = await promoCodes.where('promoCode', isEqualTo: code).get();
    return query.docs.isNotEmpty;
  }

  /// –õ–æ–≥–∏–Ω (–ø–æ email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É)
  Future<Map<String, dynamic>?> getUserData(
      String emailOrPhone,
      String password,
      ) async {
    final query = await users.where('emailOrPhone', isEqualTo: emailOrPhone).get();
    if (query.docs.isEmpty) return null;

    final data = query.docs.first.data();
    if (data['password'] != hashPassword(password)) return null;

    final prefs = await SharedPreferences.getInstance();
    final userId = query.docs.first.id;
    await prefs.setString('userId', userId);
    await prefs.setString('userType', data['type']);


    // –î–æ–±–∞–≤–ª—è–µ–º userId –≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π Map
    return {
      'userId': userId,
      ...data,
    };
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<Map<String, String>?> checkCurrentUser() async {
    final prefs = await SharedPreferences.getInstance();
    final userId = prefs.getString('userId');
    final userType = prefs.getString('userType');

    if (userId != null && userType != null) {
      return {'userId': userId, 'userType': userType};
    }
    return null;
  }

  /// –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  Future<void> logout() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove('userId');
    await prefs.remove('userType');
  }

  /// –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
  Future<void> changePassword(
      String userId, String oldPassword, String newPassword) async {
    final docRef = users.doc(userId);
    final doc = await docRef.get();

    if (!doc.exists) throw Exception("User not found");

    final data = doc.data();
    if (data!['password'] != hashPassword(oldPassword)) {
      throw Exception("Incorrect old password");
    }

    final hashedNewPassword = hashPassword(newPassword);
    await docRef.update({'password': hashedNewPassword});
  }
}
